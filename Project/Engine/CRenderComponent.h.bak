#pragma once
#include "CComponent.h"


#include "CMesh.h"
#include "CMaterial.h"
#include "ptr.h"


struct tMtrlSet
{   
    Ptr<CMaterial>  pSharedMtrl;    // 공유 메테리얼
    Ptr<CMaterial>  pDynamicMtrl;   // 공유 메테리얼의 복사본    
    Ptr<CMaterial>  pCurMtrl;       // 현재 사용 할 메테리얼
};

class CRenderComponent :
    public CComponent
{
private:
    Ptr<CMesh>              m_pMesh;
    vector<tMtrlSet>        m_vecMtrls;     // 재질    

    Ptr<CMaterial>          m_pSharedMtrl;  // 원본 메테리얼
    Ptr<CMaterial>          m_pDynamicMtrl; // SharedMaterial 복사본
    Ptr<CMaterial>          m_pCurrentMtrl; // 현재 사용 중인 재질
    float                   m_fBounding;    // FrustumCheck용 범위
    bool                    m_bFrustumCheck;// FrustumCheck 유무
    bool                    m_bDrawBounding;
    bool                    m_bDynamicShadow;

public:
    virtual void render() = 0;
    virtual void render_depthmap();

public:
    void SetMesh(Ptr<CMesh> _Mesh) { m_pMesh = _Mesh; }
    void SetMaterial(Ptr<CMaterial> _Mtrl);

    Ptr<CMesh> GetMesh() { return m_pMesh; }
    Ptr<CMaterial> GetMaterial() { return m_pCurrentMtrl; }
    Ptr<CMaterial> GetSharedMaterial() { return m_pSharedMtrl; }
    Ptr<CMaterial> GetDynamicMaterial();
    bool IsUseFrustumCheck() { return m_bFrustumCheck; }
    float GetBounding() { return m_fBounding; }
    bool IsDynamicShadow() { return m_bDynamicShadow; }

    void SetFrustumCheck(bool _bUse) { m_bFrustumCheck = _bUse; }
    void SetBounding(float _fBounding) { m_fBounding = _fBounding; }
    void SetDynamicShadow(bool _bSet) { m_bDynamicShadow = _bSet; }

    virtual void SaveToLevelFile(FILE* _File) override;
    virtual void LoadFromLevelFile(FILE* _File) override;

public:
    CRenderComponent(COMPONENT_TYPE _type);
    ~CRenderComponent();
};

